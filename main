#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <assert.h>

#define PHILOS 5
#define DELAY 5000
#define FOOD 50

void *philosopher(void *id);
void grab_chopsticks(int, int, int);
void down_chopsticks(int, int);
int food_on_table();

pthread_mutex_t chopstick[PHILOS];
pthread_t philo[PHILOS];
pthread_mutex_t food_lock;
pthread_mutex_t table_lock; 
int sleep_seconds = 0;

int main(int argn, char **argv) {
    int i;

    if (argn == 2)
        sleep_seconds = atoi(argv[1]);

    pthread_mutex_init(&food_lock, NULL);
    pthread_mutex_init(&table_lock, NULL); 
    for (i = 0; i < PHILOS; i++)
        pthread_mutex_init(&chopstick[i], NULL);
    for (i = 0; i < PHILOS; i++)
        pthread_create(&philo[i], NULL, philosopher, (void *)i);
    for (i = 0; i < PHILOS; i++)
        pthread_join(philo[i], NULL);
    return 0;
}

void *philosopher(void *num) {
    int id;
    int left_chopstick, right_chopstick, f;

    id = (int)num;
    printf("Filósofo %d terminou de pensar e está pronto para comer.\n", id);
    right_chopstick = id;
    left_chopstick = (id + 1) % PHILOS;

    while ((f = food_on_table())) {
        if (id == 1)
            sleep(sleep_seconds);

      
        pthread_mutex_lock(&table_lock);
        grab_chopsticks(id, right_chopstick, left_chopstick);
        pthread_mutex_unlock(&table_lock);

        printf("Filósofo %d: comendo.\n", id);
        usleep(DELAY * (FOOD - f + 1));

        down_chopsticks(right_chopstick, left_chopstick);
    }

    printf("Filósofo %d terminou de comer.\n", id);
    return NULL;
}

int food_on_table() {
    static int comida = FOOD;
    int minha_comida;

    pthread_mutex_lock(&food_lock);
    if (comida > 0) {
        comida--;
    }
    minha_comida = comida;
    pthread_mutex_unlock(&food_lock);
    return minha_comida;
}

void grab_chopsticks(int phil, int right, int left) {
    pthread_mutex_lock(&chopstick[right]);
    pthread_mutex_lock(&chopstick[left]);
    printf("Filósofo %d: pegou os garfos %d e %d\n", phil, right, left);
}

void down_chopsticks(int right, int left) {
    pthread_mutex_unlock(&chopstick[right]);
    pthread_mutex_unlock(&chopstick[left]);
    printf("Filósofo %d devolveu os garfos %d e %d\n", phil, right, left);
}
